<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JSON数据和Java对象的相互转换</title>
    <link href="/2021/08/16/JSON%E6%95%B0%E6%8D%AE%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/08/16/JSON%E6%95%B0%E6%8D%AE%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="Json介绍"><a href="#Json介绍" class="headerlink" title="Json介绍"></a>Json介绍</h3><p>Json有一下几种解释的方法</p><ul><li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 是轻量级的文本数据交换格式</li><li>JSON 具有自我描述性，更易理解</li><li>JSON 独立于语言<ul><li>JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台</li><li>JSON 解析器和 JSON 库支持许多不同的编程语言</li><li> 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON</li></ul></li></ul><h3 id="Json语法"><a href="#Json语法" class="headerlink" title="Json语法"></a>Json语法</h3><ul><li>数据在键值对中（Key/Value）<ul><li>Key用引号（单双都行）引起来，也可以不使用引号<ul><li><p>Value的取值类</p><pre><code>1. 数字（整数或浮点数）</code></pre><ol start="2"><li>字符串（在双引号中）</li><li>boolean（true 或 false）</li><li>数组（在中括号中）    </li><li>对象（在大括号中）</li><li>null</li></ol></li></ul></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>中括号保存数组：[]</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;sites&quot;</span>: [<br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;百度&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.baidu.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;google&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;github&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.github.com&quot;</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>大括号保存对象：{}</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span> , <span class="hljs-attr">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Doe&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="JSON数据和Java对象的相互转换"><a href="#JSON数据和Java对象的相互转换" class="headerlink" title="JSON数据和Java对象的相互转换"></a>JSON数据和Java对象的相互转换</h3><h4 id="JSON解析器"><a href="#JSON解析器" class="headerlink" title="JSON解析器"></a>JSON解析器</h4><p>常见的Json解析器有：jsonlib，gson，fastjson，jackson，<strong>本文章将使用jackson进行json与java对象互相转换的操作</strong></p><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><img src="/img/JSON数据和Java对象的相互转换/3.png"><h5 id="domain下的Person类"><a href="#domain下的Person类" class="headerlink" title="domain下的Person类"></a>domain下的Person类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.json.domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> address;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.address = address;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>            <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="test下的JsonTest类"><a href="#test下的JsonTest类" class="headerlink" title="test下的JsonTest类"></a>test下的JsonTest类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.json.test;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.json.domain.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 创建person对象</span><br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.setName(<span class="hljs-string">&quot;json&quot;</span>);<br>        person.setAge(<span class="hljs-number">22</span>);<br>        person.setAddress(<span class="hljs-string">&quot;杭州&quot;</span>);<br><br>        <span class="hljs-comment">// 创建jackson解析器对象</span><br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">// 调用方法转换person对象为string字符串</span><br>        String string = objectMapper.writeValueAsString(person);<br><br>        System.out.println(string);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// json数据</span><br>        String json = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;json\&quot;,\&quot;age\&quot;:\&quot;23\&quot;,\&quot;address\&quot;:\&quot;运城\&quot;&#125;&quot;</span>;<br><br>        <span class="hljs-comment">// 创建jackson解析器对象</span><br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">// 调用方法将json转换为person对象</span><br>        Person person = objectMapper.readValue(json, Person.class);<br><br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="程序运行截图"><a href="#程序运行截图" class="headerlink" title="程序运行截图"></a>程序运行截图</h4><p>test1方法运行截图</p><img src="/img/JSON数据和Java对象的相互转换/1.png"><p>test2方法运行截图</p><img src="/img/JSON数据和Java对象的相互转换/2.png"><h3 id="自定义解析"><a href="#自定义解析" class="headerlink" title="自定义解析"></a>自定义解析</h3><p>当我们在转换时可能有一些特殊的需求，例如某属性需要按照某种格式进行转换（例如生日），某种属性不需要进行转换（例如薪水在企业中是需要保密的），在这个时候，注解可以帮我们解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将生日按照特定格式进行转化</span><br><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br><br><span class="hljs-comment">// 薪水不需要进行转换</span><br><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-keyword">private</span> Double salary;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2021/08/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Git的用途"><a href="#Git的用途" class="headerlink" title="Git的用途"></a>Git的用途</h3><p>版本控制</p><h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><ul><li>Git</li><li>SVN（Subversion）</li><li>CVS（Concurrent Versions System）</li><li>VSS（Micorosoft Visual SourceSafe）</li><li>TFS（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>影响力最大且使用最广泛的是Git与SVN</p><h3 id="Git的起源"><a href="#Git的起源" class="headerlink" title="Git的起源"></a>Git的起源</h3><p>在没使用版本管理工具以前，Linux开源社区团队绝大多数的 Linux 内核维护工作<strong>都花在了提交补丁和保存归档的繁琐事务上</strong>。到 2002 年，Linux开源社区团队开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码（BitKeeper 是收费的，但是鉴于Linux开源社区团队是一个非盈利组织，因此BitKeeper 公司将BitKeeper 免费提供给Linux开源社区团队使用）。</p><p>但是后来，Linux开源社区团队中有成员开始破解研究 BitKeeper，这使得BitKeeper公司非常不满，收回了Linux开源社区团队对于BitKeeper的免费使用权，Linux内核创始人Linus Torvalds后来出面让 BitKeeper跟Linux开源社区团队和解，使得Linux开源社区团队重新使用上了BitKeeper这个工具，<strong>但是2周后，Linus Torvalds就开发出自己的版本系统—Git</strong>。</p><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p><a href="https://git-scm.com/downloads%EF%BC%8C">https://git-scm.com/downloads，</a> 无脑下一步安装即可（安装路径可自行设置）</p><h3 id="Git的配置"><a href="#Git的配置" class="headerlink" title="Git的配置"></a>Git的配置</h3><ol><li><p>全局配置文件：GIT_HOME\etc\gitconfig</p></li><li><p>用户的个人配置文件：C:\Users\USERNAME\.gitconfig</p></li><li><p>进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span> <span class="hljs-comment"># 该名字会在提交代码时进行使用</span><br><br>&gt; git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span> <span class="hljs-comment"># 该邮箱会在提交代码时进行使用</span><br></code></pre></td></tr></table></figure></li><li><p>查看配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ git config -l<br>diff.astextplain.textconv=astextplain<br>filter.lfs.clean=git-lfs clean -- %f<br>filter.lfs.smudge=git-lfs smudge -- %f<br>filter.lfs.process=git-lfs filter-process<br>filter.lfs.required=<span class="hljs-literal">true</span><br>http.sslbackend=openssl<br>http.sslcainfo=D:/Git/mingw64/ssl/certs/ca-bundle.crt<br>core.autocrlf=<span class="hljs-literal">true</span><br>core.fscache=<span class="hljs-literal">true</span><br>core.symlinks=<span class="hljs-literal">false</span><br>pull.rebase=<span class="hljs-literal">false</span><br>credential.helper=manager-core<br>credential.https://dev.azure.com.usehttppath=<span class="hljs-literal">true</span><br>init.defaultbranch=master<br>user.email=shileiz@foxmail.com<br>user.name=M0untainShley<br>http.sslverify=<span class="hljs-literal">true</span><br>core.repositoryformatversion=0<br>core.filemode=<span class="hljs-literal">false</span><br>core.bare=<span class="hljs-literal">false</span><br>core.logallrefupdates=<span class="hljs-literal">true</span><br>core.symlinks=<span class="hljs-literal">false</span><br>core.ignorecase=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Git常用的一些操作"><a href="#Git常用的一些操作" class="headerlink" title="Git常用的一些操作"></a>Git常用的一些操作</h3><h4 id="将某个项目使用Git进行管理（git-init-git-clone）"><a href="#将某个项目使用Git进行管理（git-init-git-clone）" class="headerlink" title="将某个项目使用Git进行管理（git init/git clone）"></a>将某个项目使用Git进行管理（git init/git clone）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文件夹</span><br>❯ mkdir GitProj<br><br><span class="hljs-comment"># 进入文件</span><br>❯ <span class="hljs-built_in">cd</span> GitProj<br><br><span class="hljs-comment"># 使用Git进行管理</span><br>❯ git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> C:/Users/ShleyCpt/Desktop/GitProj/.git/<br></code></pre></td></tr></table></figure><p>或者可以使用下面这种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆某个git文件</span><br>❯ git <span class="hljs-built_in">clone</span> https://github.com/M0untainShley/m0untainshley.github.io.git<br>Cloning into <span class="hljs-string">&#x27;m0untainshley.github.io&#x27;</span>...<br>remote: Enumerating objects: 18, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (18/18), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (11/11), <span class="hljs-keyword">done</span>.<br>remote: Total 18 (delta 0), reused 18 (delta 0), pack-reused 0<br>Receiving objects: 100% (18/18), 37.46 KiB | 87.00 KiB/s, <span class="hljs-keyword">done</span>.<br></code></pre></td></tr></table></figure><h4 id="Git查看远程仓库（git-remote）"><a href="#Git查看远程仓库（git-remote）" class="headerlink" title="Git查看远程仓库（git remote）"></a>Git查看远程仓库（git remote）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看远程仓库的信息</span><br>❯ git remote -v<br><br><span class="hljs-comment"># 添加远程仓库</span><br>❯ git remote add RemoteRepo https://github.com/M0untainShley/m0untainshley.github.io  <span class="hljs-comment"># RemoteRepo可以理解为一个别名</span><br><br><span class="hljs-comment"># 查看远程仓库的信息</span><br>❯ git remote -v<br>RemoteRepo      https://github.com/M0untainShley/m0untainshley.github.io (fetch)<br>RemoteRepo      https://github.com/M0untainShley/m0untainshley.github.io (push)<br><br><span class="hljs-comment"># 查看远程仓库的详细信息</span><br>❯ git remote show RemoteRepo<br>* remote RemoteRepo<br>  Fetch URL: https://github.com/M0untainShley/m0untainshley.github.io<br>  Push  URL: https://github.com/M0untainShley/m0untainshley.github.io<br>  HEAD branch: master<br>  Remote branch:<br>    master new (next fetch will store <span class="hljs-keyword">in</span> remotes/RemoteRepo)<br>    <br><span class="hljs-comment"># 删除远程仓库</span><br>❯ git remote remove RemoteRepo<br><br><span class="hljs-comment"># 再次查看，已经没有任何信息了</span><br>❯ git remote -v<br><br></code></pre></td></tr></table></figure><h4 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h4><p>四个区域</p><ol><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到暂存区</span><br>❯ git add .<br><br><span class="hljs-comment"># 添加到本地仓库</span><br>❯ git commit -m <span class="hljs-string">&quot;第一个Git文件&quot;</span><br><br><span class="hljs-comment"># 提交到远程仓库,本地的 master 分支推送到 origin 主机的 master 分支</span><br><span class="hljs-comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br>&gt; git push origin master<br><br><span class="hljs-comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br>&gt; git push origin master:master<br></code></pre></td></tr></table></figure><p>四种状态</p><ol><li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p></li><li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p></li><li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p></li><li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的状态</span><br>&gt; git status FILENAME<br></code></pre></td></tr></table></figure><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本地的分支，*代表当前的分支</span><br>❯ git branch<br>* master<br><br><span class="hljs-comment"># 创建分支</span><br>❯ git branch MyBranch<br>❯ git branch <span class="hljs-comment"># 查看本地分支，出现了一个MyBranch分支</span><br>  MyBranch<br>* master<br><br><span class="hljs-comment"># 切换分支</span><br>❯ git checkout MyBranch<br>Switched to branch <span class="hljs-string">&#x27;MyBranch&#x27;</span><br>❯ git branch <span class="hljs-comment"># 已经切换到MyBranch分支</span><br>* MyBranch<br>  master<br>  <br><span class="hljs-comment"># 删除分支（需要先切换为其它分支）</span><br>❯ git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br>❯ git branch -d MyBranch <span class="hljs-comment"># 删除MyBranch分支</span><br>Deleted branch MyBranch (was 7ab68b2).<br>❯ git branch <span class="hljs-comment"># 已删除</span><br>* master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Java Web</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
